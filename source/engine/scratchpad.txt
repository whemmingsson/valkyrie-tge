
OPEN ACTION
===========

Current head ache:

The game engine needs to provide some built-in actions to simplify the development process for the game developer. This is the the purpose of the game-events.ts file.
However, some aspects of the configuration still needs to be provided by the game dev developer. They are (for now, at least):

* The mappings (for enabling language support)
* The text strings (also for language support)

Ofc Compiler should deal with helping the developer with this, but we still need to provide the API / framework for such things.

Solution:

* Event-merger? Sounds complicated. But it's ONE way of accomplishing this - by merging the event objects.
* Language lookups - A simpler solution.

A mix of these two probably is the way. 

Lets use OPEN action as an example. 

The game engine specifices the behaviour and logic. The game definition file specifies:
* inital state (locked / open)
* ON_<>_TEXT's for all applicable cases.

<> needs to be called something reasonable.

This is how the def for the OPEN action (event) used to look in the game def. Note that the conditions are missing.
{
    "scope": "ITEM",
    "trigger": "COMMAND",
    "action": "OPEN",
    "meta": {
        "text": "You have opened the chest. Inside you find a key. It is a small brass key. It looks like it might fit a small lock. Maybe a lock of brass?"
    },
    "mappings": [
        {
            "inputs": [
                "open"
            ],
            "rule": "ANY"
        }
    ]
},

This is the entire item:

  {
        "id": "c_1", // SAVE
        "type": "CONTAINER", // SAVE
        "name": "chest", // SAVE
        "description": "A large wooden chest. It does not appear to be locked. Maybe it can be opened directly?", // SAVE
        "open": false, // STATE - SAVE
        "locked": false, // STATE - SAVE
        "events": [
            {
                "scope": "ITEM", // DELETE - inferred
                "trigger": "COMMAND", // DELTE - inferred
                "action": "OPEN", // SAVE
                "meta": {
                    "text": "You have opened the chest. Inside you find a key. It is a small brass key. It looks like it might fit a small lock. Maybe a lock of brass?"
                }, // SAVE
                "mappings": [
                    {
                        "inputs": [
                            "open"
                        ],
                        "rule": "ANY"
                    }
                ] // SAVE
            },
            {
                "scope": "ITEM",
                "trigger": "COMMAND",
                "action": "CLOSE",
                "meta": {
                    "text": "You close the chest. It is now closed."
                },
                "mappings": [
                    {
                        "inputs": [
                            "close"
                        ],
                        "rule": "ANY"
                    }
                ]
            }
        ]
},

Suggestion for new structure:

  {
        "id": "c_1",
        "type": "CONTAINER", 
        "name": "chest", 
        "description": "A large wooden chest. It does not appear to be locked. Maybe it can be opened directly?",
        "open": false, 
        "locked": false, 
        "events": [
            {
                "action": "OPEN", 
                "meta": {
                    "text": "You have opened the chest. Inside you find a key. It is a small brass key. It looks like it might fit a small lock. Maybe a lock of brass?",
                    "on_locked_text": "Yeah it's locked dude (but this should really be impossible since it's not even lockable)",
                    "on_open_text": "It's already open"
                },
                "mappings": [
                    {
                        "inputs": [
                            "open"
                        ],
                        "rule": "ANY"
                    }
                ],            
            },
            {
                "action": "CLOSE",
                "meta": {
                    "text": "You close the chest. It is now closed."
                    "on_closed_text": "The chest is already closed."
                },
                "mappings": [
                    {
                        "inputs": [
                            "close"
                        ],
                        "rule": "ANY"
                    }
                ],               
            }
        ]
},

Solved!


COLOR FORMATTING
================

Goal: Find a way to annotate words using a markup-like approach to text strings.

Exampel text:

Lorem ipsum dolor sit amet

<w>word</w>

Solved!

DIRECTION/ORIENTATION MAPPING
=============================

The current solution does not consider that certain items are only available in specific orientation.

Scenario:

A room with 4 walls. At each wall, there is a chest. No further description of the chests are provided. So for each orientation, the player can command:

> open chest

But right now, the engine does not know which chest is referred. However, this information should be able to be picked up based on the CONTEXT.

Proposed solution: Filter out target objects that does not exist on the current orientation.
That would require the game dev to explictly specify WHERE the target object is located. 

This still is not quite enough, since there could be several items with the same short name in the same direction. However, lets save that for later.

Solution: In object-finder: const item = room.items.find((item) => item.name === targetName && (item.direction ?? '').toUpperCase() === context.playerDirection);

Solved!

PICK UP - THE BASICS
====================

Current headache - pick up action. How do we make it possible for the player to pickup items?

Items can be contained within containers - and also freely available in the room - given the player is facing in the proper direction.

Items freely available should be able to be picked up directly. Lets start with that.

PICK UP PART 2 - THE TEXTS
==========================

What if certain texts contains reference to picked up objects? It's a true possibility. Then it does not make sense to render that text again. Maybe we can have conditional texts?

Solved!

PICK UP PART 3 - ITEMS IN CONTAINERS
====================================

The last crucial piece is to enable picking up items in (opened) containers. Maybe just start to include all open containers in the search space?

In progress?

THE ACTION FUNCTION MESS
========================

All this "wrapAction" is making my head hurt. Lets try to re-define some things.

New proposed chain:

Command -> Command resolvs to an action -> An action is an object with 
1. A function to execute()
2. Some metadata

Lets look at how things work RIGHT NOW 

Lets take a simple action builder function (not the action itself, to be clear), it looks like this:

actionBuilder.buildSimpleTextAction = (text: string | string[]) => {
    return () => {
        logText(text);
    }
}

It returns a function that logs the text.

But now, when this function buildSimpleTextAction is called, its later wrapped in an Action object as the execute function.

Like so:

return wrapAction(actionBuilder.buildSimpleTextAction(turnText));

But when this is used in another execute() function, it becomes hard to understand.

So when the parent execute() function is called, the above call is made. Like this:

parent.execute() -> Returns an Action (child). It does its thing and returns a wrapAction(...). This wrapped Action is then executed() in the next iteration in the event chain loop, as:

    let actionResult = action.execute(); // Parent 

    while (actionResult) {
        actionResult = actionResult.execute(); // Child.
    }

Lets try to streamline the simple actions first by having them return the Action object itself:

actionBuilder.buildSimpleTextAction = (text: string | string[]) => {
    return {execute:logText(text), meta: {...}}
}






